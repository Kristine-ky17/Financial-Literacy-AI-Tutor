import random
import pandas as pd

# Define learning styles and corresponding behavior pools
learning_styles = {
    "Visual": [
        "draws mind maps", "uses diagrams", "highlighter usage", "color-codes notes",
        "sketches processes", "prefers charts"
    ],
    "Verbal": [
        "takes detailed notes", "reads aloud", "prefers written instructions", "writes summaries",
        "uses mnemonics", "likes reading textbooks"
    ],
    "Logical": [
        "solves puzzles", "enjoys math", "analyzes patterns", "asks 'why' questions",
        "likes step-by-step instructions", "breaks problems into parts"
    ],
    "Active": [
        "asks questions", "joins discussions", "teaches peers", "engages in role-play",
        "tries out examples", "debates topics"
    ],
    "Passive": [
        "listens quietly", "observes demonstrations", "reflects silently", "avoids participation",
        "watches videos", "reads quietly"
    ],
    "Multimodal": [
        "mixes diagrams and notes", "switches learning methods", "adapts easily",
        "uses videos and texts", "participates then reflects", "likes variety"
    ]
}

# Generate synthetic data
def generate_student_profiles(n=500):
    data = []
    for i in range(1, n + 1):
        style = random.choice(list(learning_styles.keys()))
        behaviors = random.sample(learning_styles[style], k=3)  # Pick 3 behaviors
        data.append({
            "student_id": i,
            "behaviors": behaviors,
            "learning_style": style
        })
    return pd.DataFrame(data)

# Create dataset
student_df = generate_student_profiles()
student_df.to_csv("/mnt/data/student_learning_styles.csv", index=False)
student_df.head()



import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# Load data
df = pd.read_csv("student_learning_styles.csv")
df["behavior_text"] = df["behaviors"].str.replace("[", "").str.replace("]", "").str.replace("'", "")

# Vectorize behavior text
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df["behavior_text"])
y = df["learning_style"]

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

# Evaluate
y_pred = rf.predict(X_test)
print(classification_report(y_test, y_pred))
